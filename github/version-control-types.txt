
* Tipos de controle de versão

Sistemas locais

- Copiar os arquivos para outro diretório
- Muito comum e muito mais simples
- Incrivelmente propensa a erros
- Fácil de sobreescrever arquivos caso haja feito alguma cópia errada. 

Para superar os possíveis erros, existe o RCS - Revision Control System

- Ferramenta popular (antigamente) para controle de versão.
- Manter conjuntos de alterações, ou seja, as diferenças entre os arquivos.
- Formato especial no disco.
- Re-criar como qualquer arquivo se parecia em qualquer ponto no tempo, adicionando-se todas as alterações ao arquivo.

E se você precisar colaborar com desenvolvedores em outros sistemas?

Sistemas centralizados
#Exemplo: CVS, Subversion e Perforce.

- Um único servidor que contém todos os arquivos de controle de versão
- Vários clientes usam arquivos a partir desse lugar central

Por muitos anos, este tem sido o padrão para o controle de versão.

Vantagens sobre VCSs locais

- Controle sobre atividades dos colaboradores no projeto
- Os administradores tem controle refinado sobre quem pode fazer o que
- Mais fácil de administrar um CVCS do que lidar com banco de dados locais em cada cliente

Desvantagens

- Se esse servidor der problema por uma hora, durante essa hora ninguém pode colaborar ou salvar as alterações de versão para o que quer que elas estejam trabalhando. (Já passei por isso)
- Se o disco rígido do banco de dados central for corrompido, você perde absolutamente tudo.
- Sistemas VCS locais sofrem com esse mesmo problema 

Sempre que você tenha toda a história de um projeto em um único lugar, há o risco de perder tudo.

Sistemas distribuidos
#Exemplo: Git, Mercurial, Bazaar ou Darcs.

- Duplicar (clonar) localmente o repositório completo
- Se qualquer servidor morrer, e esses sistemas estiverem colaborando por meio dele, qualquer um dos repositórios do cliente poderá ser copiado de volta para o servidor.
- Cada clone é de fato um backup completo de todos os dados
- Clientes usam o estado mais recente dos arquivos